TODO:

- Document usage
# Usage

# in class

class app.views.FileDropzone extends app.views.Plugin

  @exportPlugin('dropzone')

  initialize: (options) ->
    console.log @$el

  uninstall: (e) =>
    super
    @dropzones.off '.dropzone'

# in application.js

$(document).on 'ready page:load page:restore', ->
  $(document).dropzone()



- Other

make it a mixin for Backbone.View?

then it's transparent

_.extend(Backbone.View, {});

see:

https://github.com/jeromegn/Backbone.localStorage/blob/master/backbone.localStorage.js


make uninstall optional / configuraable

Backbone.View.uninstallOn (class method)

@exportPlugin({ uninstallOn: { 'page:change', document } })
  page:change
  pjax:start


class MyView extends Backbone.View
  uninstall: =>
    super
    delete @lastPage


MyView = Backbone.View.extend({
  uninstall: function() {
    Backbone.View.prototype.uninstall.call(this);
    delete this.lastPage;
  }
});


extend @exportPlugin to take uninstallEvent option (overrides global)
