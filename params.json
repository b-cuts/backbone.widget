{"name":"Backbone.Widget","tagline":"Make jQuery widgets from your Backbone Views.","body":"`Backbone.Widget` extends `Backbone.View` with some simple helpers for creating jQuery widgets/plugins (`$.fn`).\r\n\r\nThis enables creating `Backbone.View` instances with jQuery syntax:\r\n\r\n```javascript\r\n$('.example').myView([options]);\r\n```\r\n\r\nWhy?\r\n----\r\n\r\nAt the code level `Backbone.View` offers a nice way to structure your jQuery widget/plugin code.\r\n`Backbone.Widget` just provides some minimal glue code to make this easy.\r\n\r\nAt the application / architecture level, the [JS Widgets][js-widgets] approach can offer a hybrid / DOM-centric alternative to single page apps; with static HTML from the server providing the foundation for multiple mini-applications (widgets).\r\n\r\n\r\nUsage\r\n-----\r\n\r\n### JavaScript ###\r\n\r\n```javascript\r\n// extend Backbone.Widget\r\nMyView = Backbone.Widget.extend({\r\n  initialize: function(options) {\r\n    console.log(this.el, options);\r\n  }\r\n});\r\n\r\n// export as widget\r\nMyView.exportWidget('myView');\r\n\r\n// call on element\r\n$('.example').myView([options]);\r\n```\r\n\r\n### CoffeeScript ###\r\n\r\n```coffeescript\r\n# extend Backbone.Widget\r\nclass MyView extends Backbone.Widget\r\n\r\n  # export as widget\r\n  @exportWidget 'myView'\r\n\r\n  initialize: (options) ->\r\n    console.log @el, options\r\n\r\n# call on element\r\n$('.example').myView([options])\r\n```\r\n\r\n\r\nTricks\r\n------\r\n\r\n### Calling view methods ###\r\n\r\nView methods can be called directly on the element\r\n\r\n```javascript\r\n$('.example').myView('remove')\r\n```\r\n\r\n### View instance ###\r\n\r\nA reference to the view instance is stored in the element's `$.data`.\r\n\r\n```javascript\r\nview = $('.example').data('myView');\r\nconsole.log(view.cid); // view0\r\n```\r\n\r\n### Namespace ###\r\n\r\nThe `namespace` option is passed to the view instance for convenience.\r\nThis can be useful for e.g. [namespacing events][jquery-events].\r\n\r\n```javascript\r\n...\r\ninitialize: function(options) {\r\n  console.log(options.namespace); // myView\r\n}\r\n...\r\n```\r\n\r\n### Auto remove ###\r\n\r\n`Widgets`'s can optionally `remove` themselves on a given event.\r\nThis can be useful with [pjax] / [turbolinks]\r\nwhere you need to routinely cleanup views between \"page loads\".\r\nSee the [wiki page][auto-remove-wiki] for more details.\r\n\r\n[js-widgets]: http://blog.pamelafox.org/2013/05/frontend-architectures-server-side-html.html\r\n[jquery-events]: http://docs.jquery.com/Namespaced_Events\r\n[pjax]: https://github.com/defunkt/jquery-pjax\r\n[turbolinks]: https://github.com/rails/turbolinks\r\n[auto-remove-wiki]: https://github.com/meleyal/backbone.pluginview/wiki/Auto-Remove\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}