// Generated by CoffeeScript 1.4.0

/*
  Backbone.Widget
  https://github.com/meleyal/backbone.widget

  Copyright (c) 2013 William Meleyal
  MIT License
*/


(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.Widget = (function(_super) {

    __extends(Widget, _super);

    function Widget() {
      this.uninstall = __bind(this.uninstall, this);
      return Widget.__super__.constructor.apply(this, arguments);
    }

    Widget.exportWidget = function(namespace) {
      var self;
      self = this;
      return $.fn[namespace] = function(options) {
        if (options == null) {
          options = {};
        }
        return this.each(function(idx, el) {
          return self.install(el, options, namespace);
        });
      };
    };

    Widget.install = function(el, options, namespace) {
      var $el, data, uninstallEvent, view;
      uninstallEvent = Backbone.Widget.uninstallEvent;
      $el = $(el);
      data = $el.data(namespace);
      if (data == null) {
        options = _.extend(options, {
          el: el,
          namespace: namespace
        });
        view = new this(options);
        $el.data(namespace, view);
        if (uninstallEvent) {
          return $(document).on("" + uninstallEvent + "." + namespace, view.uninstall);
        }
      }
    };

    Widget.prototype.uninstall = function(e) {
      var namespace;
      namespace = this.options.namespace;
      this.undelegateEvents();
      $(document).off("." + namespace);
      return this.$el.removeData(namespace);
    };

    return Widget;

  })(Backbone.View);

}).call(this);
